How to make a image classification using open CV with IBM Watson ?

NOTE : To get an API key you have to create IBM cloud account 
for more details about the login and accessing the API key contact me by using the links given below.

This is about how to operate the Watson Visual Recognition API and Open CV using the Python Programming Language. The advantage of using the Watson Visual Recognition API over the Graphic User Interface on the Browser that you did earlier in this course is because you can automate the training, and testing of your Visual Recognition model.

So instead of logging in to your IBM Cloud account so that you can upload a picture that you want to classify, you can upload an image to your Visual Recognition model by running piece of python code.

IBM Watson Package
In order to run this lab we need to import two packages.

IBM Watson: which allows access to the Watson Visual Recognition API

OpenCV: a package that will help us with image processing

The code below will install Watson Developer Cloud and OpenCV.

To run, click on the code cell below and press "shift + enter".

! pip install --upgrade ibm-watson opencv-python
Plotting images in Jupyter Notebooks..


Let's use a function to help us display images from a URL: The function below with the name plt_image grabs the image from the internet provided that you supply the web address of the image.

URL stands for Uniform Resource Locator, which in this case the web address of our image.


import cv2
import urllib.request
from matplotlib import pyplot as plt
from pylab import rcParams

def plt_image(image_url, size = (10,8)):

    # Downloads an image from a URL, and displays it in the notebook
    urllib.request.urlretrieve(image_url, "image.jpg") # downloads file as "image.jpg"
    image = cv2.imread("image.jpg")
    
    # If image is in color, then correct color coding from BGR to RGB
    if len(image.shape) == 3:
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    
    rcParams['figure.figsize'] = size[0], size[1] #set image display size

    plt.axis("off")
    plt.imshow(image, cmap="Greys_r")
    plt.show()

image_url = 'place you image url here'
plt_image(image_url)


Setting the API key for IBM Watson Visual Recognition
In order for you to use the IBM Watson Visual Recognition API, you will need the API key of the Visual Recognition instance that you have created in the previous sections.

Log into your IBM Cloud account with the following link.

https://cloud.ibm.com

Click on Services

Under Services, click on your Watson Visual Recognition Instance

Copy the API Key and past it in the code cell below




Then press "ctrl + enter" to run the code cell.

# Paste your API key for IBM Watson Visual Recognition below:

my_apikey = 'ezQT5iYFPVbv0_mVEJcV-56KhxJiUjbvOWdA400Peyh9'

Initialize Watson Visual Recognition.
Let's create your own Watson Visual Recognition instance, it will allow you to make calls to the Watson Visual Recognition API.

from ibm_watson import VisualRecognitionV3
from ibm_cloud_sdk_core.authenticators import IAMAuthenticator
authenticator = IAMAuthenticator(my_apikey)

visrec = VisualRecognitionV3('2018-03-19', 
                             authenticator=authenticator)
                             
Identifying Objects in the Image
We can see that there are two persons in the picture above. But does the computer knows this?
Let's call the classify method from the Watson Image Recognition API to see what objects our Image Recognition Model can identify from this picture.

import json

image_url = 'http://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/CV0101/Images/Donald_Trump_Justin_Trudeau_2017-02-13_02.jpg'


# threshold is set to 0.6, that means only classes that has a confidence score of 0.6 or greater will be shown
classes = visrec.classify(url=image_url,
                          threshold='0.6',
                          classifier_ids='default').get_result()

plt_image(image_url)
print(json.dumps(classes, indent=2))


Getting Watson Visual Recognition results as a dataframe.
The problem with the classify method is that it gave an output that is extremely confusing to look at. The output is in a format called JSON which stands for JavaScript Object Notation, we can cleanup the presentation of our output by using the data structure called dataframe in the pandas library.
In the code cell below we use a function called getdf_visrec which uses a dataframe that can help us easily sort the classified labels by confidence score in descending order.


from pandas.io.json import json_normalize

def getdf_visrec(url, apikey = my_apikey):
    
    json_result = visrec.classify(url=url,
                              threshold='0.6',
                              classifier_ids='default').get_result()
    
    json_classes = json_result['images'][0]['classifiers'][0]['classes']
    
    df = json_normalize(json_classes).sort_values('score', ascending=False).reset_index(drop=True)
    
    return df
Again place your URL here

url = 'paste your URL here'
plt_image(url)
getdf_visrec(url)
